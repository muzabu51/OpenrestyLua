#user  nobody;
worker_processes  1;
#pid /usr/local/var/run/openresty.pid;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    #include       mime.types;
    #default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_shared_dict my_limit_req_store 100m;
    init_by_lua_block{
        reqstore = ngx.shared.my_limit_req_store
        reqstore:flush_all()
        reqstore:set('192.168.43.52', '0000000000000000')
        reqstore:set('198.168.1.105', '0000000000000000')
        reqstore:set('198.168.0.100', '0000000000000000')
    }

    #lua_shared_dict my_limit_conn_store 100m;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            default_type 'text/plain';
            #content_type 'text/plain';

            access_by_lua_block {

                local limit_req = require "resty.limit.req"
                local status = true
                local req_shrd = ngx.shared.my_limit_req_store:get_keys()
                
                for k,v in pairs(req_shrd) do 
                    if ngx.var.remote_addr == v then
                        status = true
                        break
                    else status = false end
                end

                if status then

                    local lim, err = limit_req.new("my_limit_req_store", 5, 3)
                    --ngx.say(err)
                    

                    if not lim then
                        ngx.log(ngx.ERR, "failed to instantiate a resty.limit.req object: ", err)
                        return ngx.exit(500)
                    end

                    local key = ngx.var.remote_addr
                    local delay, err = lim:incoming(key, true)

                    --ngx.say('delay = ', delay, 'err= ', err)

                    if not delay then  
                        if err == "rejected" then
                            return ngx.exit(503)
                        end
                        ngx.log(ngx.ERR, "failed to limit req: ", err)
                        return ngx.exit(500)
                    end

                    if delay >= 0.001 then
                        ngx.say('BURST')
                        ngx.say('Key = ', ngx.var.remote_addr)
                        tab = ngx.shared.my_limit_req_store:get_keys()
                        for k,v in pairs(tab) do 
                            val = ngx.shared.my_limit_req_store:get(v)
                            ngx.say('key = ',v, 'val=', string.byte(val, 1, #val)) 
                        end
                        local excess = err

                        ngx.sleep(delay)
                    end
                else ngx.exit(401)
                end

            }
            
            root   html;
            index  index.html index.htm;
        }
       
        # To allow POST on static pages
        error_page  405     =200 $uri;
        #error_page  404     =200 $uri;

    }
}
