# IP filtering follwed by integration of request and concurrency request liminting
#user  nobody;
worker_processes  1;
#pid /usr/local/var/run/openresty.pid;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    #include       mime.types;
    #default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_shared_dict my_limit_req_store 100m;

    lua_shared_dict my_limit_conn_store 100m;

    init_by_lua_block{
        reqstore = ngx.shared.my_limit_req_store
        reqstore:flush_all()
        reqstore:set('192.168.43.52', '0000000000000000')
        reqstore:set('198.168.1.105', '0000000000000000')
        reqstore:set('198.168.0.100', '0000000000000000')
    }

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log;

        location / {
            default_type 'text/plain';

            access_by_lua_block {
                local limit_conn = require "resty.limit.conn"
                local limit_req = require "resty.limit.req"
                local limit_traffic = require "resty.limit.traffic"
                local req_shrd = ngx.shared.my_limit_req_store:get_keys()
                
                for k,v in pairs(req_shrd) do 
                    if ngx.var.remote_addr == v then
                        status = true
                        break
                    else status = false end
                end
                
                if status then 
                    local lim1, err = limit_req.new("my_limit_req_store", 1000, 150)
                    assert(lim1, err)
                    local lim2, err = limit_req.new("my_limit_req_store", 200, 150)
                    assert(lim2, err)
                    local lim3, err = limit_conn.new("my_limit_conn_store", 5, 1, 0.5)
                    assert(lim3, err)

                    local limiters = {lim1, lim2, lim3}

                    local host = ngx.var.host
                    local client = ngx.var.remote_addr
                    local keys = {host, client, client}

                    local states = {}

                    local delay, err = limit_traffic.combine(limiters, keys, states)
                    if not delay then
                        if err == "rejected" then
                            return ngx.exit(503)
                        end
                        ngx.log(ngx.ERR, "failed to limit traffic: ", err)
                        return ngx.exit(500)
                    end

                    if lim3:is_committed() then
                        local ctx = ngx.ctx
                        ctx.limit_conn = lim3
                        ctx.limit_conn_key = keys[3]
                    end

                    
                    if delay >= 0.001 then
                        ngx.say('BURST')
                        ngx.say('Key = ', ngx.var.remote_addr)
                        ngx.say('delay = ', delay, 'err = ', err)

                        tab = ngx.shared.my_limit_conn_store:get_keys()
                        for k,v in pairs(tab) do 
                            ngx.say('k = ',k, 'v=', v) 
                        end
                        ngx.sleep(delay)
                    end
                else ngx.exit(401) end
            }

            # content handler goes here. if it is content_by_lua, then you can
            # merge the Lua code above in access_by_lua into your
            # content_by_lua's Lua handler to save a little bit of CPU time.

            log_by_lua_block {
                local ctx = ngx.ctx
                local lim = ctx.limit_conn
                if lim then
                    -- if you are using an upstream module in the content phase,
                    -- then you probably want to use $upstream_response_time
                    -- instead of $request_time below.
                    local latency = tonumber(ngx.var.request_time)
                    local key = ctx.limit_conn_key
                    assert(key)
                    local conn, err = lim:leaving(key, latency)
                    if not conn then
                        ngx.log(ngx.ERR,
                                "failed to record the connection leaving ",
                                "request: ", err)
                        return
                    end
                end
            }

            
            root   html;
            index  index.html index.htm;
        }
        # To allow POST on static pages
        error_page  405     =200 $uri;
        #error_page  404     =200 $uri;

    }
}
